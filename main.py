import os
import sys
import streamlit as st
import atexit
from data_loader import fetch_stock_data, prepare_data_for_spark
from spark_processor import SparkDataProcessor
from charts import plot_live_prices, plot_summary_stats
from config import TICKERS

# –£–∫–∞–∑–∞–Ω–∏–µ Python-–∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ –¥–ª—è Sparkpython -m streamlit run main.py
venv_path = os.path.dirname(os.path.dirname(sys.executable))
os.environ["PYSPARK_PYTHON"] = os.path.join(venv_path, "Scripts", "python.exe")
os.environ["PYSPARK_DRIVER_PYTHON"] = sys.executable

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ Streamlit
st.set_page_config(page_title="Financial Streaming Dashboard", layout="wide")
st.title("üìà Real-Time Stock Market Dashboard")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Spark
spark_processor = SparkDataProcessor()

@atexit.register
def cleanup():
    if spark_processor.spark is not None:
        spark_processor.spark.stop()

# –ö—ç—à–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö
@st.cache_data(ttl=120, show_spinner="üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —Ä—ã–Ω–∫–∞...")
def load_and_process_data():
    try:
        raw = fetch_stock_data()
        if raw is None or raw.empty:
            return None, None

        prepared = prepare_data_for_spark(raw)
        if prepared is None or prepared.empty:
            return None, None

        # process_data —É–∂–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç pandas DataFrame, toPandas() –Ω–µ –Ω—É–∂–µ–Ω
        processed = spark_processor.process_data(prepared)
        return prepared, processed if processed is not None else None
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return None, None

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
with st.spinner("‚è≥ –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ..."):
    prepared_data, processed_data = load_and_process_data()

if prepared_data is None:
    st.warning("‚ö†Ô∏è –ù–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    st.stop()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤—ã–±–æ—Ä–∞ —Ç–∏–∫–µ—Ä–∞
available_tickers = prepared_data["Ticker"].unique().tolist()
selected_ticker = st.sidebar.selectbox("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–∫–µ—Ä:", available_tickers)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ü–µ–Ω
st.subheader("üíπ –¶–µ–Ω–∞ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã")
price_chart = plot_live_prices(prepared_data, selected_ticker)
if price_chart:
    st.plotly_chart(price_chart, use_container_width=True)

# –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
if processed_data is not None:
    st.subheader("üìä –°–≤–æ–¥–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ü–∏—è–º")
    summary_chart = plot_summary_stats(processed_data)
    if summary_chart:
        st.plotly_chart(summary_chart, use_container_width=True)

# –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
st.caption("üîÑ –î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª—è—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–µ 2 –º–∏–Ω—É—Ç—ã.")
